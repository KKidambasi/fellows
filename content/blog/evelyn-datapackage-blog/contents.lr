title:
**Let’s Talk Data Packaging**

author:
Evelyn Night Okello

pub_date: 2020-11-22
---
cohort: 2
---
body:

Packaging of data is the practice of using data packaging tools to containerize data with all its required metadata in the most convenient format that is both human- and machine readable. Packaging removes kinks and ambiguity that comes up when dealing with multivariate data. It additionally ensures that the data does not suffer mishandling and misinterpretation in the hands of others. A few weeks ago I met data packages for the first time and I was intrigued since I had spent too much time in the past wrangling missing and inconsistent values. Packaging data therefore taught me that arranging and preserving data does not have to be tedious anymore. Here, I show how I packaged a bit of my data (unpublished) into a neat json document using the [Data Package creator](https://create.frictionlessdata.io/) . I am excited to show you just how much I have come from knowing nothing to being able to package and extract the json output. 


### _Here we go!_

**The Data Package Creator**
<img src="dp1.png" width=100% alt="dp1">
<p style="text-align: center; font-style: italic">The Data Package Creator user interface.</p>

This is a friendly user interface that was created by the open knowledge foundation to enable a quick and easy route to creating and accessing a datapackage. It therefore allows coders and non-coders alike to be able to do this without breaking a sweat. First, the data needs to be loaded into the system and the **Path **(A) section comes handy in this. You can either paste a github url or use the **Load **(B) section to access the csv file from your remote machine.
I loaded data from my PC and the system automatically inferred 15 fields for me.

<img src="dp2.png" width=100% alt="dp2">
<p style="text-align: center; font-style: italic">Part C reveals inferred fields from your read data.</p>

 I then defined my fields using the **settings **wheel that enabled me to input the name and the schema. My work is in a tabulated format so the tabular data package was fitting. In the metadata section I also inferred the name and title, a short description of the data package, the versions and licences and finally the keywords.

<img src="dp3.png" width=100% alt="dp3">
<p style="text-align: center; font-style: italic">all the inferred fields, you can now do the specific edits on the data and metadata.</p> 

I then checked if all the fields that were inferred from my dataset were okay and pressed **validate.**
Pretty straightforward, right? Yes. 

<img src="dp4.png" width=100% alt="dp4">
<p style="text-align: center; font-style: italic">Valid!.</p>

After validating, I wanted to see how my json file looked and to also download it for storage in my PC and also share on github. Clicking on the **{...}** symbol (D) allowed me to sneak a peek at my new json file while the Download button just...downloaded it.

This process took me like 10 minutes to complete and it had everything I needed!.

You can also learn to create your packages in R and Python from the Frictionless fellows [website](https://fellows.frictionlessdata.io/lessons/#datapackages) .

**_Setbacks_**

Before I pulled this amazing stunt, my data had been invalid at least twice and I want to point this out because it really sucks if you get an invalid without knowing the cause. After a few tweaks I found out that the name I wrote in the resource and metadata section needed to be separated by an underscore **(_)**. By doing that I was in the clear so fear not if your data package is deemed invalid since the solution could just be a click away

**_In a nutshell…_**

Using the data package creator is the simplest method I have found to create data packages and this is after practising the same in R and python. It is therefore high time we packaged our research into the invaluable data packages to enhance data reuse and to also reduce the amount of time spent wrangling inconsistent data. Best.
